!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDITIONAL_SIZE	src/memleak/memleak.c	/^#define ADDITIONAL_SIZE /;"	d	file:
AR	build/main.mk	/^AR    := ar$/;"	m
BUILD_SHARED_LIBRARY	build/main.mk	/^BUILD_SHARED_LIBRARY := build\/shared_library.mk$/;"	m
BUILD_STATIC_LIBRARY	build/main.mk	/^BUILD_STATIC_LIBRARY := build\/static_library.mk$/;"	m
CC	build/main.mk	/^CC    := gcc$/;"	m
CEILING16	include/framework/mtype.h	/^#define CEILING16(/;"	d
CEILING16	include/mct/mtype.h	/^#define CEILING16(/;"	d
CEILING2	include/framework/mtype.h	/^#define CEILING2(/;"	d
CEILING2	include/mct/mtype.h	/^#define CEILING2(/;"	d
CEILING32	include/framework/mtype.h	/^#define CEILING32(/;"	d
CEILING32	include/mct/mtype.h	/^#define CEILING32(/;"	d
CEILING4	include/framework/mtype.h	/^#define CEILING4(/;"	d
CEILING4	include/mct/mtype.h	/^#define CEILING4(/;"	d
CLEAR_VARS	build/main.mk	/^CLEAR_VARS := build\/clear_vars.mk$/;"	m
ENABLE_SIG	src/memleak/memleak.c	/^#define ENABLE_SIG /;"	d	file:
FALSE	include/framework/mtype.h	/^#define FALSE /;"	d
FALSE	include/framework/mtype.h	/^#undef  FALSE$/;"	d
FALSE	include/mct/mtype.h	/^#define FALSE /;"	d
FALSE	include/mct/mtype.h	/^#undef  FALSE$/;"	d
FRAMEWORK_H_INCLUDED	include/framework/framework.h	/^#define FRAMEWORK_H_INCLUDED$/;"	d
HAL_H_INCLUDED	include/hal/hal.h	/^#define HAL_H_INCLUDED$/;"	d
HIDE	build/main.mk	/^HIDE := $/;"	m
HIDE	build/main.mk	/^HIDE := @$/;"	m
INIT_LIST_HEAD	include/utils/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIST_HEAD	include/utils/list.h	/^#define LIST_HEAD(/;"	d
LIST_HEAD_INIT	include/utils/list.h	/^#define LIST_HEAD_INIT(/;"	d
LIST_H_INCLUDED	include/utils/list.h	/^#define LIST_H_INCLUDED$/;"	d
LIST_POISON1	include/utils/list.h	/^#define LIST_POISON1 /;"	d
LIST_POISON2	include/utils/list.h	/^#define LIST_POISON2 /;"	d
LOCAL_C_FLAGS	build/clear_vars.mk	/^LOCAL_C_FLAGS    := $/;"	m
LOCAL_C_INCLUDES	build/clear_vars.mk	/^LOCAL_C_INCLUDES := $/;"	m
LOCAL_DEP	build/clear_vars.mk	/^LOCAL_DEP        :=$/;"	m
LOCAL_DEP	build/shared_library.mk	/^LOCAL_DEP := $(patsubst %.o,%.d,$(LOCAL_OBJS))$/;"	m
LOCAL_DEP	build/static_library.mk	/^LOCAL_DEP := $(patsubst %.o,%.d,$(LOCAL_OBJS))$/;"	m
LOCAL_INCLUDES	build/clear_vars.mk	/^LOCAL_INCLUDES   :=$/;"	m
LOCAL_INCLUDES	build/shared_library.mk	/^$(LOCAL_OUT_DIR)\/%.o:LOCAL_INCLUDES:=$(addprefix -I,$(LOCAL_C_INCLUDES))$/;"	m
LOCAL_INCLUDES	build/static_library.mk	/^$(LOCAL_OUT_DIR)\/%.o:LOCAL_INCLUDES:=$(addprefix -I,$(LOCAL_C_INCLUDES))$/;"	m
LOCAL_MODULE	build/clear_vars.mk	/^LOCAL_MODULE     := $/;"	m
LOCAL_MODULE	src/framework/module.mk	/^LOCAL_MODULE := libframework$/;"	m
LOCAL_MODULE	src/hal/module.mk	/^LOCAL_MODULE := libhal$/;"	m
LOCAL_MODULE	src/mct/module.mk	/^LOCAL_MODULE := libmct$/;"	m
LOCAL_MODULE	src/memleak/module.mk	/^LOCAL_MODULE := libmemleak$/;"	m
LOCAL_OBJS	build/clear_vars.mk	/^LOCAL_OBJS       := $/;"	m
LOCAL_OBJS	build/shared_library.mk	/^LOCAL_OBJS := $(addprefix $(LOCAL_OUT_DIR)\/,$(LOCAL_OBJS))$/;"	m
LOCAL_OBJS	build/shared_library.mk	/^LOCAL_OBJS := $(patsubst %.c,%.o,$(LOCAL_SRC_FILES))$/;"	m
LOCAL_OBJS	build/static_library.mk	/^LOCAL_OBJS := $(addprefix $(LOCAL_OUT_DIR)\/,$(LOCAL_OBJS))$/;"	m
LOCAL_OBJS	build/static_library.mk	/^LOCAL_OBJS := $(patsubst %.c,%.o,$(LOCAL_SRC_FILES))$/;"	m
LOCAL_OUT_DIR	build/clear_vars.mk	/^LOCAL_OUT_DIR    := $/;"	m
LOCAL_OUT_DIR	build/shared_library.mk	/^LOCAL_OUT_DIR := $(TARGET_OUT_DIR)\/$(LOCAL_PATH)$/;"	m
LOCAL_OUT_DIR	build/static_library.mk	/^LOCAL_OUT_DIR := $(TARGET_OUT_DIR)\/$(LOCAL_PATH)$/;"	m
LOCAL_OUT_TARGET	build/clear_vars.mk	/^LOCAL_OUT_TARGET := $/;"	m
LOCAL_OUT_TARGET	build/shared_library.mk	/^LOCAL_OUT_TARGET := $(LOCAL_OUT_DIR)\/$(LOCAL_MODULE).so$/;"	m
LOCAL_OUT_TARGET	build/static_library.mk	/^LOCAL_OUT_TARGET := $(LOCAL_OUT_DIR)\/$(LOCAL_MODULE).a$/;"	m
LOCAL_PATH	src/framework/module.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	src/hal/module.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	src/mct/module.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	src/memleak/module.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_DIR	src/memleak/module.mk	/^LOCAL_SRC_DIR := $(LOCAL_PATH)$/;"	m
LOCAL_SRC_FILES	build/clear_vars.mk	/^LOCAL_SRC_FILES  := $/;"	m
LOCAL_SRC_FILES	src/framework/module.mk	/^LOCAL_SRC_FILES := framework.c main.c$/;"	m
LOCAL_SRC_FILES	src/hal/module.mk	/^LOCAL_SRC_FILES := $(patsubst $(LOCAL_PATH)\/%,%,$(shell find $(LOCAL_PATH) -name *.c))$/;"	m
LOCAL_SRC_FILES	src/mct/module.mk	/^LOCAL_SRC_FILES := $(patsubst $(LOCAL_PATH)\/%,%,$(shell find $(LOCAL_PATH) -name *.c))$/;"	m
LOGE_ENABLE	include/utils/log.h	/^#define LOGE_ENABLE /;"	d
LOGI_ENABLE	include/utils/log.h	/^#define LOGI_ENABLE /;"	d
LOGV_ENABLE	include/utils/log.h	/^#define LOGV_ENABLE /;"	d
LOGW_ENABLE	include/utils/log.h	/^#define LOGW_ENABLE /;"	d
LOG_H_INCLUDED	include/utils/log.h	/^#define LOG_H_INCLUDED$/;"	d
LOG_TAG	include/utils/log.h	/^#define LOG_TAG /;"	d
MAGIC_ALLOC	src/memleak/memleak.c	/^#define MAGIC_ALLOC /;"	d	file:
MAGIC_FREE	src/memleak/memleak.c	/^#define MAGIC_FREE /;"	d	file:
MAX_BACKTRACE_DEPTH	src/memleak/memleak.c	/^#define MAX_BACKTRACE_DEPTH /;"	d	file:
MAX_FUNC_STRING_LENGHT	src/memleak/memleak.c	/^#define MAX_FUNC_STRING_LENGHT /;"	d	file:
MCT_LIST_NEXT	include/mct/mct_list.h	/^#define MCT_LIST_NEXT(/;"	d
MCT_LIST_PREV	include/mct/mct_list.h	/^#define MCT_LIST_PREV(/;"	d
MCT_QUEUE_FIND_CUSTOM	include/mct/mct_queue.h	/^#define MCT_QUEUE_FIND_CUSTOM(/;"	d
MCT_QUEUE_IS_EMPTY	include/mct/mct_queue.h	/^#define MCT_QUEUE_IS_EMPTY(/;"	d
MEMLEAK_EXIT	include/memleak/memleak.h	/^#define MEMLEAK_EXIT /;"	d
MEMLEAK_H	include/memleak/memleak.h	/^#define MEMLEAK_H$/;"	d
MKDIR	build/main.mk	/^MKDIR := mkdir -p$/;"	m
MTYPE_ABS	include/framework/mtype.h	/^#define MTYPE_ABS(/;"	d
MTYPE_ABS	include/mct/mtype.h	/^#define MTYPE_ABS(/;"	d
MTYPE_CLAMP	include/framework/mtype.h	/^#define MTYPE_CLAMP(/;"	d
MTYPE_CLAMP	include/mct/mtype.h	/^#define MTYPE_CLAMP(/;"	d
MTYPE_MAX	include/framework/mtype.h	/^#define MTYPE_MAX(/;"	d
MTYPE_MAX	include/mct/mtype.h	/^#define MTYPE_MAX(/;"	d
MTYPE_MIN	include/framework/mtype.h	/^#define MTYPE_MIN(/;"	d
MTYPE_MIN	include/mct/mtype.h	/^#define MTYPE_MIN(/;"	d
MTypePixelFormat	include/framework/mtype.h	/^} MTypePixelFormat;$/;"	t	typeref:enum:__anon1
MTypePixelFormat	include/mct/mtype.h	/^} MTypePixelFormat;$/;"	t	typeref:enum:__anon2
M_BAYER_10_BITS	include/framework/mtype.h	/^  M_BAYER_10_BITS,$/;"	e	enum:__anon1
M_BAYER_10_BITS	include/mct/mtype.h	/^  M_BAYER_10_BITS,$/;"	e	enum:__anon2
M_BAYER_12_BITS	include/framework/mtype.h	/^  M_BAYER_12_BITS,$/;"	e	enum:__anon1
M_BAYER_12_BITS	include/mct/mtype.h	/^  M_BAYER_12_BITS,$/;"	e	enum:__anon2
M_BAYER_8_BITS	include/framework/mtype.h	/^  M_BAYER_8_BITS,$/;"	e	enum:__anon1
M_BAYER_8_BITS	include/mct/mtype.h	/^  M_BAYER_8_BITS,$/;"	e	enum:__anon2
M_OPAQUE	include/framework/mtype.h	/^  M_OPAQUE$/;"	e	enum:__anon1
M_OPAQUE	include/mct/mtype.h	/^  M_OPAQUE$/;"	e	enum:__anon2
M_YCbCr420	include/framework/mtype.h	/^  M_YCbCr420,$/;"	e	enum:__anon1
M_YCbCr420	include/mct/mtype.h	/^  M_YCbCr420,$/;"	e	enum:__anon2
M_YCbCr422	include/framework/mtype.h	/^  M_YCbCr422,$/;"	e	enum:__anon1
M_YCbCr422	include/mct/mtype.h	/^  M_YCbCr422,$/;"	e	enum:__anon2
M_YCrCb420	include/framework/mtype.h	/^  M_YCrCb420,$/;"	e	enum:__anon1
M_YCrCb420	include/mct/mtype.h	/^  M_YCrCb420,$/;"	e	enum:__anon2
M_YCrCb422	include/framework/mtype.h	/^  M_YCrCb422,$/;"	e	enum:__anon1
M_YCrCb422	include/mct/mtype.h	/^  M_YCrCb422,$/;"	e	enum:__anon2
PAD_TO_2K	include/framework/mtype.h	/^#define PAD_TO_2K(/;"	d
PAD_TO_2K	include/mct/mtype.h	/^#define PAD_TO_2K(/;"	d
PAD_TO_4K	include/framework/mtype.h	/^#define PAD_TO_4K(/;"	d
PAD_TO_4K	include/mct/mtype.h	/^#define PAD_TO_4K(/;"	d
PAD_TO_8K	include/framework/mtype.h	/^#define PAD_TO_8K(/;"	d
PAD_TO_8K	include/mct/mtype.h	/^#define PAD_TO_8K(/;"	d
PAD_TO_WORD	include/framework/mtype.h	/^#define PAD_TO_WORD(/;"	d
PAD_TO_WORD	include/mct/mtype.h	/^#define PAD_TO_WORD(/;"	d
PRINT_LEAK_MEMORY	include/memleak/memleak.h	/^#define PRINT_LEAK_MEMORY /;"	d
RM	build/main.mk	/^RM    := rm -rf$/;"	m
ROOT_DIR	build/main.mk	/^ROOT_DIR       := $(PWD)$/;"	m
SIG_DISABLE	src/memleak/memleak.c	/^#define SIG_DISABLE /;"	d	file:
SIG_ENABLE	src/memleak/memleak.c	/^#define SIG_ENABLE /;"	d	file:
SIG_PRINT	src/memleak/memleak.c	/^#define SIG_PRINT /;"	d	file:
STRIP	build/main.mk	/^STRIP := strip$/;"	m
TARGET_BIN	build/main.mk	/^TARGET_BIN := $(TARGET_OUT_DIR)\/smart_make.bin$/;"	m
TARGET_DOC	build/main.mk	/^TARGET_DOC := doc$/;"	m
TARGET_LIBS	build/main.mk	/^TARGET_LIBS    := $/;"	m
TARGET_OUT_DIR	build/main.mk	/^TARGET_OUT_DIR := out$/;"	m
TRUE	include/framework/mtype.h	/^#define TRUE /;"	d
TRUE	include/framework/mtype.h	/^#undef  TRUE$/;"	d
TRUE	include/mct/mtype.h	/^#define TRUE /;"	d
TRUE	include/mct/mtype.h	/^#undef  TRUE$/;"	d
_M_TYPE_OFFSET	include/framework/mtype.h	/^#define _M_TYPE_OFFSET(/;"	d
_M_TYPE_OFFSET	include/mct/mtype.h	/^#define _M_TYPE_OFFSET(/;"	d
_M_TYPE_WAIT_TIMEOUT	include/framework/mtype.h	/^#define _M_TYPE_WAIT_TIMEOUT(/;"	d
_M_TYPE_WAIT_TIMEOUT	include/mct/mtype.h	/^#define _M_TYPE_WAIT_TIMEOUT(/;"	d
__FD_CLR	include/framework/mtype.h	/^#define __FD_CLR(/;"	d
__FD_CLR	include/framework/mtype.h	/^#undef __FD_CLR$/;"	d
__FD_CLR	include/mct/mtype.h	/^#define __FD_CLR(/;"	d
__FD_CLR	include/mct/mtype.h	/^#undef __FD_CLR$/;"	d
__FD_ISSET	include/framework/mtype.h	/^#define __FD_ISSET(/;"	d
__FD_ISSET	include/framework/mtype.h	/^#undef  __FD_ISSET$/;"	d
__FD_ISSET	include/mct/mtype.h	/^#define __FD_ISSET(/;"	d
__FD_ISSET	include/mct/mtype.h	/^#undef  __FD_ISSET$/;"	d
__FD_SET	include/framework/mtype.h	/^#define __FD_SET(/;"	d
__FD_SET	include/framework/mtype.h	/^#undef __FD_SET$/;"	d
__FD_SET	include/mct/mtype.h	/^#define __FD_SET(/;"	d
__FD_SET	include/mct/mtype.h	/^#undef __FD_SET$/;"	d
__FD_ZERO	include/framework/mtype.h	/^#define __FD_ZERO(/;"	d
__FD_ZERO	include/framework/mtype.h	/^#undef  __FD_ZERO$/;"	d
__FD_ZERO	include/mct/mtype.h	/^#define __FD_ZERO(/;"	d
__FD_ZERO	include/mct/mtype.h	/^#undef  __FD_ZERO$/;"	d
__MCT_LIST_H__	include/mct/mct_list.h	/^#define __MCT_LIST_H__$/;"	d
__MCT_QUEUE_H__	include/mct/mct_queue.h	/^#define __MCT_QUEUE_H__$/;"	d
__M_TYPE_H__	include/framework/mtype.h	/^#define __M_TYPE_H__$/;"	d
__M_TYPE_H__	include/mct/mtype.h	/^#define __M_TYPE_H__$/;"	d
__calloc	src/memleak/memleak.c	/^void * __calloc(size_t nmemb, size_t size)$/;"	f
__free	src/memleak/memleak.c	/^void __free(void *ptr)$/;"	f
__list_add	include/utils/list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	include/utils/list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_del_entry	include/utils/list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__malloc	src/memleak/memleak.c	/^void * __malloc(size_t size)$/;"	f
__real_calloc	src/memleak/memleak.c	/^static real_calloc_type __real_calloc = NULL;$/;"	v	file:
__real_free	src/memleak/memleak.c	/^static real_free_type __real_free = NULL;$/;"	v	file:
__real_malloc	src/memleak/memleak.c	/^static real_malloc_type __real_malloc = NULL;$/;"	v	file:
__real_realloc	src/memleak/memleak.c	/^static real_realloc_type __real_realloc = NULL;$/;"	v	file:
__realloc	src/memleak/memleak.c	/^void * __realloc(void *ptr, size_t size)$/;"	f
__wrap_calloc	src/memleak/memleak.c	/^void * __wrap_calloc(size_t nmemb, size_t size)$/;"	f
__wrap_free	src/memleak/memleak.c	/^void __wrap_free(void *ptr)$/;"	f
__wrap_malloc	src/memleak/memleak.c	/^void * __wrap_malloc(size_t size)$/;"	f
__wrap_realloc	src/memleak/memleak.c	/^void * __wrap_realloc(void *ptr, size_t size)$/;"	f
_mct_list	include/mct/mct_list.h	/^struct _mct_list {$/;"	s
_mct_queue	include/mct/mct_queue.h	/^typedef struct _mct_queue {$/;"	s
add	src/memleak/memleak.c	/^static inline void add(hdr_t *hdr, size_t size)$/;"	f	file:
addr	src/memleak/memleak.c	/^  uintptr_t *addr;$/;"	m	struct:stack_crawl_state_t	file:
alloc_traced	src/memleak/memleak.c	/^  int alloc_traced;$/;"	m	struct:hdr_t	file:
allocated	src/memleak/memleak.c	/^  int allocated;$/;"	m	struct:hdr_t	file:
boolean	include/framework/mtype.h	/^typedef int   boolean;$/;"	t
boolean	include/mct/mtype.h	/^typedef int   boolean;$/;"	t
bt	src/memleak/memleak.c	/^  uintptr_t bt[MAX_BACKTRACE_DEPTH];$/;"	m	struct:hdr_t	file:
bt_depth	src/memleak/memleak.c	/^  int bt_depth;$/;"	m	struct:hdr_t	file:
container_of	include/utils/list.h	/^#define container_of(/;"	d
data	include/mct/mct_list.h	/^  void         *data;$/;"	m	struct:_mct_list
disable_memleak_trace	src/memleak/memleak.c	/^void disable_memleak_trace(int signum __unused)$/;"	f
enable_memleak_trace	src/memleak/memleak.c	/^void enable_memleak_trace(int signum __unused)$/;"	f
end	src/memleak/memleak.c	/^  uintptr_t end;$/;"	m	struct:map_info_holder	file:
finish	src/memleak/memleak.c	/^static __attribute__((destructor)) void finish(void)$/;"	f	file:
framework	src/framework/framework.c	/^int framework()$/;"	f
hal	src/hal/hal.c	/^int hal()$/;"	f
hdr_t	src/memleak/memleak.c	/^struct hdr_t {$/;"	s	file:
hdr_t	src/memleak/memleak.c	/^typedef struct hdr_t hdr_t;$/;"	t	typeref:struct:hdr_t	file:
head	include/mct/mct_queue.h	/^  mct_list_t   *head;$/;"	m	struct:_mct_queue
init	src/memleak/memleak.c	/^static __attribute__((constructor)) void init(void)$/;"	f	file:
last	src/memleak/memleak.c	/^static hdr_t *last = NULL;$/;"	v	file:
leaks_bytes	src/memleak/memleak.c	/^static unsigned int leaks_bytes = 0;$/;"	v	file:
length	include/mct/mct_queue.h	/^  uint32_t length;$/;"	m	struct:_mct_queue
lib_map_create	src/memleak/memleak.c	/^static struct map_info_holder *lib_map_create(pid_t pid) {$/;"	f	file:
lib_map_destroy	src/memleak/memleak.c	/^void lib_map_destroy(struct map_info_holder *map_hold)$/;"	f
lib_map_find_name	src/memleak/memleak.c	/^static struct map_info_holder *lib_map_find_name(struct map_info_holder *mi,$/;"	f	file:
lib_map_parse_line	src/memleak/memleak.c	/^static struct map_info_holder *lib_map_parse_line(char* line)$/;"	f	file:
list_add	include/utils/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	include/utils/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	include/utils/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	include/utils/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	include/utils/list.h	/^#define list_entry(/;"	d
list_for_each_entry	include/utils/list.h	/^#define list_for_each_entry(/;"	d
list_head	include/utils/list.h	/^struct list_head $/;"	s
loge	include/utils/log.h	/^#define loge(/;"	d
logi	include/utils/log.h	/^#define logi(/;"	d
logv	include/utils/log.h	/^#define logv(/;"	d
logw	include/utils/log.h	/^#define logw(/;"	d
main	src/framework/main.c	/^int main(int argc __unused, char * argv[] __unused)$/;"	f
map_info_holder	src/memleak/memleak.c	/^struct map_info_holder {$/;"	s	file:
max_depth	src/memleak/memleak.c	/^  size_t max_depth;$/;"	m	struct:stack_crawl_state_t	file:
mct_list_append	src/mct/mct_list.c	/^mct_list_t* mct_list_append(mct_list_t *mct_list, void *data, void *appendto,$/;"	f
mct_list_find_and_add_custom	src/mct/mct_list.c	/^mct_list_t* mct_list_find_and_add_custom(mct_list_t *parent_list,$/;"	f
mct_list_find_custom	src/mct/mct_list.c	/^mct_list_t* mct_list_find_custom(mct_list_t *mct_list,$/;"	f
mct_list_find_custom_branch	src/mct/mct_list.c	/^static mct_list_t* mct_list_find_custom_branch(mct_list_t *mct_list,$/;"	f	file:
mct_list_find_func	include/mct/mct_list.h	/^typedef boolean (* mct_list_find_func)(void *data1, void *data2);$/;"	t
mct_list_free	src/mct/mct_list.c	/^static void mct_list_free(mct_list_t *mct_list)$/;"	f	file:
mct_list_free_all	src/mct/mct_list.c	/^void mct_list_free_all(mct_list_t *mct_list, mct_list_traverse_func traverse)$/;"	f
mct_list_free_all_on_data	src/mct/mct_list.c	/^void mct_list_free_all_on_data(mct_list_t *mct_list,$/;"	f
mct_list_free_list	src/mct/mct_list.c	/^void mct_list_free_list(mct_list_t *mct_list)$/;"	f
mct_list_insert	src/mct/mct_list.c	/^mct_list_t* mct_list_insert(mct_list_t *mct_list __unused,$/;"	f
mct_list_insert_before	src/mct/mct_list.c	/^mct_list_t* mct_list_insert_before(mct_list_t *mct_list __unused,$/;"	f
mct_list_new	src/mct/mct_list.c	/^static mct_list_t *mct_list_new(void *data)$/;"	f	file:
mct_list_operate_func	include/mct/mct_list.h	/^typedef void (* mct_list_operate_func)$/;"	t
mct_list_operate_nodes	src/mct/mct_list.c	/^void mct_list_operate_nodes(mct_list_t *mct_list,$/;"	f
mct_list_remove	src/mct/mct_list.c	/^mct_list_t* mct_list_remove(mct_list_t *mct_list, const void *data)$/;"	f
mct_list_t	include/mct/mct_list.h	/^typedef struct _mct_list mct_list_t;$/;"	t	typeref:struct:_mct_list
mct_list_traverse	src/mct/mct_list.c	/^boolean mct_list_traverse(mct_list_t *mct_list,$/;"	f
mct_list_traverse_branch	src/mct/mct_list.c	/^static boolean mct_list_traverse_branch(mct_list_t *mct_list,$/;"	f	file:
mct_list_traverse_func	include/mct/mct_list.h	/^typedef boolean (* mct_list_traverse_func)(void *data, void *user_data);$/;"	t
mct_queue_flush	src/mct/mct_queue.c	/^void mct_queue_flush(mct_queue_t *q, mct_queue_traverse_func traverse)$/;"	f
mct_queue_free	src/mct/mct_queue.c	/^void mct_queue_free(mct_queue_t *q)$/;"	f
mct_queue_free_all	src/mct/mct_queue.c	/^void mct_queue_free_all(mct_queue_t *q, mct_queue_traverse_func traverse)$/;"	f
mct_queue_free_func	include/mct/mct_queue.h	/^typedef void (*mct_queue_free_func)     (void *data, void *user_data);$/;"	t
mct_queue_init	src/mct/mct_queue.c	/^void mct_queue_init(mct_queue_t *q)$/;"	f
mct_queue_look_at_head	src/mct/mct_queue.c	/^void *mct_queue_look_at_head(mct_queue_t *q)$/;"	f
mct_queue_new	include/mct/mct_queue.h	/^#define mct_queue_new /;"	d
mct_queue_pop_head	src/mct/mct_queue.c	/^void *mct_queue_pop_head(mct_queue_t *q)$/;"	f
mct_queue_push_tail	src/mct/mct_queue.c	/^void mct_queue_push_tail(mct_queue_t *q, void *data)$/;"	f
mct_queue_t	include/mct/mct_queue.h	/^} mct_queue_t;$/;"	t	typeref:struct:_mct_queue
mct_queue_traverse	src/mct/mct_queue.c	/^void mct_queue_traverse(mct_queue_t *q, mct_queue_traverse_func traverse,$/;"	f
mct_queue_traverse_func	include/mct/mct_queue.h	/^typedef mct_list_traverse_func mct_queue_traverse_func;$/;"	t
mem_trace_en	src/memleak/memleak.c	/^sig_atomic_t mem_trace_en = 0;$/;"	v
memory_mutex	src/memleak/memleak.c	/^static pthread_mutex_t memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
minimum	src/memleak/memleak.c	/^static unsigned int minimum = 0;$/;"	v	file:
mmcamera_stacktrace	src/memleak/memleak.c	/^static int mmcamera_stacktrace(uintptr_t *addrs,$/;"	f	file:
my-dir	build/main.mk	/^define my-dir$/;"	m
name	src/memleak/memleak.c	/^  char *name;$/;"	m	struct:map_info_holder	file:
next	include/mct/mct_list.h	/^  mct_list_t   **next;   \/* array of next(children) *\/$/;"	m	struct:_mct_list
next	include/utils/list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	src/memleak/memleak.c	/^  struct hdr_t *next;$/;"	m	struct:hdr_t	typeref:struct:hdr_t::hdr_t	file:
next	src/memleak/memleak.c	/^  struct map_info_holder* next;$/;"	m	struct:map_info_holder	typeref:struct:map_info_holder::map_info_holder	file:
next_num	include/mct/mct_list.h	/^  uint32_t next_num; \/* number of next(children) *\/$/;"	m	struct:_mct_list
offsetof	include/utils/list.h	/^#define offsetof(/;"	d
prev	include/mct/mct_list.h	/^  mct_list_t   *prev;$/;"	m	struct:_mct_list
prev	include/utils/list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	src/memleak/memleak.c	/^  struct hdr_t *prev;$/;"	m	struct:hdr_t	typeref:struct:hdr_t::hdr_t	file:
print_allocated_memory	src/memleak/memleak.c	/^void print_allocated_memory()$/;"	f
print_alphabet_list	src/framework/main.c	/^boolean print_alphabet_list(void *data, void *user_data __unused)$/;"	f
print_backtrace	src/memleak/memleak.c	/^void print_backtrace(struct map_info_holder *p_map_info, uintptr_t* frames, int frame_count)$/;"	f
print_mem	src/memleak/memleak.c	/^void print_mem(int signum __unused)$/;"	f
real_calloc_type	src/memleak/memleak.c	/^typedef void *(*real_calloc_type)(size_t, size_t);$/;"	t	file:
real_free_type	src/memleak/memleak.c	/^typedef void  (*real_free_type)(void *);$/;"	t	file:
real_malloc_type	src/memleak/memleak.c	/^typedef void *(*real_malloc_type)(size_t);$/;"	t	file:
real_realloc_type	src/memleak/memleak.c	/^typedef void *(*real_realloc_type)(void *, size_t);$/;"	t	file:
remove_hdr	src/memleak/memleak.c	/^static inline void remove_hdr(hdr_t *hdr)$/;"	f	file:
server_memleak_con	src/memleak/memleak.c	/^pthread_cond_t server_memleak_con = PTHREAD_COND_INITIALIZER;$/;"	v
server_memleak_event	src/memleak/memleak.c	/^char server_memleak_event = 0;$/;"	v
server_memleak_mut	src/memleak/memleak.c	/^pthread_mutex_t server_memleak_mut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
server_memleak_thread	src/memleak/memleak.c	/^void * server_memleak_thread (void * param __unused)$/;"	f
size	src/memleak/memleak.c	/^  unsigned int size;$/;"	m	struct:hdr_t	file:
skip	src/memleak/memleak.c	/^  int skip;$/;"	m	struct:stack_crawl_state_t	file:
stack_count	src/memleak/memleak.c	/^  size_t stack_count;$/;"	m	struct:stack_crawl_state_t	file:
stack_crawl_state_t	src/memleak/memleak.c	/^struct stack_crawl_state_t {$/;"	s	file:
start	src/memleak/memleak.c	/^  uintptr_t start;$/;"	m	struct:map_info_holder	file:
tail	include/mct/mct_queue.h	/^  mct_list_t   *tail;$/;"	m	struct:_mct_queue
unwind_func_call	src/memleak/memleak.c	/^static _Unwind_Reason_Code unwind_func_call(struct _Unwind_Context *context, void *arg)$/;"	f	file:
